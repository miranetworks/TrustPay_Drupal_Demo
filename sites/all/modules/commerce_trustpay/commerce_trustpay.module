<?php
/* 
 * @file
 * Provides an API for TrustPay Payment Gateway.
 * 
 */

/**
 * Implements hook_menu().
 */
function commerce_trustpay_menu() {
  $items = array();

  // Define the path to receive TPNs.
  $items['commerce_trustpay/tpn/%commerce_payment_method_instance'] = array(
    'page callback' => 'commerce_trustpay_process_tpn',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_trustpay_commerce_payment_method_info() {
    $payment_methods = array();

    $payment_methods['commerce_trustpay'] = array(
      'title' => t('TrustPay'),
      'description' => t('Integrates with the TrustPay payment gateway.'),
      'active' => TRUE,
      'offsite' => TRUE,
      'offsite_autoredirect' => TRUE,
    );

    return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_trustpay_settings_form($settings = NULL) {
    $form = array();

    $form['vendor_id'] = array(
      '#type' => 'textfield',
      '#title' => t('TrustPay Vendor ID'),
      '#description' => t('The Vendor ID as given by the TrustPay system. Used to uniquely identify the receiving account.'),
      '#default_value' => isset($settings['vendor_id']) ? $settings['vendor_id'] : '',
      '#required' => TRUE,
    );
    $form['notification_url'] = array(
       '#type' => 'textfield',
       '#title' => t('Notification URL'),
       '#description' => t('Notification URL configured at my.trustpay.biz.'),
       '#default_value' => isset($settings['notification_url']) ? $settings['notification_url'] : '',
       '#required' => FALSE,
     );

     $form['shared_secret'] = array(
       '#type' => 'textfield',
       '#title' => t('Shared Secret'),
       '#description' => t('The  Shared Secret configured at my.trustpay.biz.'),
       '#default_value' => isset($settings['shared_secret']) ? $settings['shared_secret'] : '',
       '#required' => FALSE,
     );
     
     $form['success_url'] = array(
       '#type' => 'textfield',
       '#title' => t('Custom Success URL'),
       '#description' => t('The URL to which cancel payments should be directed.'),
       '#default_value' => isset($settings['success_url']) ? $settings['success_url'] : '',
       '#required' => FALSE,
     );

     $form['cancel_url'] = array(
       '#type' => 'textfield',
       '#title' => t('Custom Cancel URL'),
       '#description' => t('The URL to which cancel payments should be directed.'),
       '#default_value' => isset($settings['cancel_url']) ? $settings['cancel_url'] : '',
       '#required' => FALSE,
     );

     $form['istest'] = array(
       '#type' => 'radios',
       '#title' => t('Transaction Mode'),
       '#options' => array(
         'yes' => ('Testing Mode'),
         'no' => ('Live Mode'),
       ),
       '#default_value' => isset($settings['istest']) ? $settings['istest'] : 'on',
     );

  return $form;
}

/**
 * Payment function (callback): redirect form to facilate TrustPay Payment Gateway 
 * redirect.
 */
function commerce_trustpay_redirect_form($form, &$form_state, $order, $payment_method) {
   
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  
  //customer
  $customer = array();
  $commerce_customer = commerce_customer_profile_load($order->commerce_customer_billing['und'][0]['profile_id']);
  
  //account
  $account = user_load($commerce_customer->uid);
  $commerce_customer = $commerce_customer->commerce_customer_address['und'][0];

  if (empty($commerce_customer['first_name'])) {
    $customer['appuser'] = $commerce_customer['name_line'] . $commerce_customer['last_name'];
  }
  else {
    $customer['appuser'] = $commerce_customer['first_name'] . $commerce_customer['last_name'];
  }
 
  //success_url 
  if (empty($payment_method['settings']['success_url'])) {
      $success_url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  }
  else {
      $success_url = $payment_method['settings']['success_url'];
  }
  
  //cancel_url
  if (empty($payment_method['settings']['cancel_url'])) {
      $cancel_url = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  }
  else {
      $cancel_url = $payment_method['settings']['cancel_url'];
  }
  
  // @TODO: allow customization of the following through settings
  // message, appuser & txid  
  
  // array to hold the trustpay api details.
  $data = array(
    'vendor_id' => $payment_method['settings']['vendor_id'],
    'appuser'   => $customer['appuser'],
    'currency'  => $currency_code,
    'amount'    => round(commerce_currency_amount_to_decimal($amount, $currency_code), 2),
    'txid'      => $order->order_id,
    'success'   => $success_url,
    'fail'      => $cancel_url,
    'message'  => t('New Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
    'istest'    => $payment_method['settings']['istest']
  );
  $form['#action'] = 'https://my.trustpay.biz/TrustPayWebClient/Transact?';
  $form['#method'] = 'GET';
  $form['#attributes'] = array('name' => 'frmPay');

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to TrustPay'),
  );

  return $form;
    
}

/**
 * Processes an incoming tpn.
 *
 * @param $payment_method
 *   The payment method instance array that originally made the payment.
 *
 * @return
 *   TRUE or FALSE indicating if the tpn was successfully processed.
 */
function commerce_trustpay_process_tpn($payment_method = NULL) {
    $tpn = $_GET;

    // Exit now if the $_GET was empty.
    if (empty($tpn)) {
      watchdog('commerce_trustpay', 'TPN URL accessed with no GET data submitted.', array(), WATCHDOG_WARNING);
      return FALSE;
    }    
    $params = array( 
                    'amount'=> $tpn['amount'],
                    'application_id'=> $tpn['application_id'],
                    'consumermessage'=> $tpn['consumermessage'],
                    'currency'=> $tpn['currency'],
                    'description' => $tpn['description'],
                    'method' => $tpn['method'],
                    'status' => $tpn['status'],
                    'tp_transaction_id' => $tpn['tp_transaction_id'],
                    'transaction_id' => $tpn['transaction_id'],
                    'transaction_time' => $tpn['transaction_time'],
                    'user_id' => $tpn['user_id'],
                    'oauth_consumer_key' => $tpn['oauth_consumer_key'],
                    'oauth_nonce' => $tpn['oauth_nonce'],
                    'oauth_signature_method' => $tpn['oauth_signature_method'],
                    'oauth_timestamp' => $tpn['oauth_timestamp'],
                    'oauth_version' => $tpn['oauth_version']
            );
        
    //validate by calculating the signiture and matching it
    $original_signature = $tpn['oauth_signature'];
    if ($payment_method == NULL){
        $payment_method = commerce_payment_method_instance_load('commerce_trustpay|commerce_payment_commerce_trustpay');
    }
    
    // If the payment method specifies full IPN logging, do it now.
    if (empty($payment_method['settings']['shared_secret']) ||
        empty($payment_method['settings']['notification_url'])) {
       watchdog('commerce_trustpay', 'Notification URL and Secret Key Configuration not found @txn_id. !tpn_log', array('@txn_id' => $tpn['transaction_id'], '!tpn_log' => '<pre>' . check_plain(print_r($tpn, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
       return FALSE;
    }else{
       $shared_secret = $payment_method['settings']['shared_secret'];
       $notificationurl = $payment_method['settings']['notification_url'];
    }
    $pos = strpos($notificationurl,'?');
    $url = substr($notificationurl,0,$pos);
    
    $consumer = new OAuthConsumer($tpn['oauth_consumer_key'], $shared_secret, $notificationurl); 

    echo '<pre>'.var_dump($params).'</pre>'; 
    echo '<pre>'.var_dump($payment_method).'</pre>'; 
    echo '<pre>'.var_dump($tpn).'</pre>'; 
       
    $request = new OAuthRequest("GET", $notificationurl, $params);
    $oauth_signature = $request->build_signature(new OAuthSignatureMethod_HMAC_SHA1, $consumer, NULL);
       
    if ($original_signature === urldecode($oauth_signature)){
        // Verification: the order specified
        /*
        list($order_id, $timestamp) = explode('-', $tpn['transaction_id']);
        $order = commerce_order_load($order_id);
        if (!$order) {
          watchdog('commerce_trustpay', 'Could not find order matching TPN order #', array(), WATCHDOG_ERROR);
          return FALSE;
        }
         */

        //Validation: The TPN (vendor_id) by checking the settings vendor_id with passed application_id 
        if ($payment_method['settings']['vendor_id'] != $tpn['application_id']) {
          commerce_payment_redirect_pane_previous_page($order);
          watchdog('commerce_trustpay', 'TPN invalid: The specified vendor_id is not valid (@vendor_id).', array('@vendor_id' => $tpn['application_id']), WATCHDOG_ERROR);
          return FALSE;
        } 
        
        echo '<pre>'.var_dump($tpn).'</pre>'; 
        if ($tpn['status'] == 'SUCCESS') {
          echo '<pre>'.var_dump("HELLLO!").'</pre>'; 
          // Create a new payment transaction for the order.
          $transaction = commerce_payment_transaction_new('trustpay', 2);
          echo '<pre>'.var_dump($transaction).'</pre>'; 

          /*
           * { ["payment_method"]=> string(8) "trustpay" 
           * ["order_id"]=> int(2) 
           * ["transaction_id"]=> NULL 
           * ["revision_id"]=> NULL 
           * ["uid"]=> string(1) "1" 
           * ["instance_id"]=> string(0) "" 
           * ["remote_id"]=> string(0) "" 
           * ["message"]=> string(0) "" 
           * ["message_variables"]=> array(0) { } 
           * ["amount"]=> int(0) 
           * ["currency_code"]=> string(0) "" 
           * ["status"]=> string(0) "" 
           * ["remote_status"]=> string(0) "" 
           * ["payload"]=> array(0) { } 
           * ["created"]=> string(0) "" 
           * ["changed"]=> string(0) "" 
           * ["is_new"]=> bool(true) }
           */
          
          $transaction->instance_id = $payment_method['instance_id'];

          $transaction->remote_id = $tpn['pf_payment_id'];
          $transaction->amount = commerce_currency_decimal_to_amount($tpn['amount'], $tpn['currency']);
          $transaction->currency_code = $tpn['currency'];
          $transaction->payload[REQUEST_TIME] = $tpn;
          $transaction->remote_status = $tpn['payment_status'];
          $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
          $transaction->message = t('The payment has completed.');

          commerce_payment_transaction_save($transaction);

          commerce_payment_redirect_pane_next_page($order);
          watchdog('commerce_trustpay', 'ITN processed for Order @order_number with ID @txn_id.', array('@txn_id' => $tpn['pf_payment_id'], '@order_number' => $order->order_number), WATCHDOG_INFO);

          // Necessary to trigger order completion
          $order = commerce_order_status_update($order, 'checkout_complete');
          commerce_checkout_complete($order);

          $tpn['transaction_id'] = $transaction->transaction_id;
          $tpn['order_id'] = $order->order_id;
          $tpn['server'] = $server;
          commerce_trustpay_tpn_save($tpn);
        }
        
    }else{
        watchdog('commerce_trustpay', 'Attempt to validate TPN failed through oauth verification.', array(), WATCHDOG_ALERT);
        return FALSE;
    }
    $order = NULL;
    module_invoke_all('commerce_trustpay_itn_process', $order, $payment_method, $tpn);
    
}

