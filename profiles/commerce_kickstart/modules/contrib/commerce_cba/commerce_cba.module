<?php

/**
 * @file
 * Commerce Checkout by Amazon
 */

// @todo Physical products integration for SetPurchaseItems
// @todo: order details as link

/**
 * Implements hook_menu().
 */
function commerce_cba_menu() {
  $items = array();

  $items['admin/commerce/config/cba'] = array(
    'title' => 'Checkout by Amazon',
    'description' => 'Manage Checkout by Amazon settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_cba_admin_form'),
    'file' => 'includes/commerce_cba.admin.inc',
    'access arguments' => array('configure store'),
  );

  $items['commerce_cba/setorder/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'commerce_cba_set_order',
    'page arguments' => array(2),
    'access arguments' => array('access checkout'),
  );

  return $items;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_cba_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['commerce_cba_orderdetailswidget'] = array(
    'title' => '',
    'name' => t('Amazon order details widget'),
    'base' => 'commerce_cba_orderdetailswidget_pane',
    'file' => 'includes/commerce_cba.checkout_pane.inc',
    'page' => 'complete',
    'review' => FALSE,
  );

  return $checkout_panes;
}

/**
 * Returns the javascript to include for the Amazon widgets depending on the
 * country and environment.
 *
 * @return bool|string
 */
function commerce_cba_javascript_file() {
  $country = variable_get('cba_country', 'gb');
  $mode = variable_get('cba_mode', 'sandbox');

  $urls = array(
    'gb' => array(
      'sandbox' => 'https://static-eu.payments-amazon.com/cba/js/gb/sandbox/PaymentWidgets.js',
      'live' => 'https://static-eu.payments-amazon.com/cba/js/gb/PaymentWidgets.js',
    ),
    'de' => array(
      'sandbox' => 'https://static-eu.payments-amazon.com/cba/js/de/sandbox/PaymentWidgets.js',
      'live' => 'https://static-eu.payments-amazon.com/cba/js/de/PaymentWidgets.js',
    ),
    'us' => array(
      'sandbox' => 'https://static-na.payments-amazon.com/cba/js/us/sandbox/PaymentWidgets.js',
      'live' => 'https://static-na.payments-amazon.com/cba/js/us/PaymentWidgets.js',
    ),
  );

  return (isset($urls[$country]) && isset($urls[$country][$mode])) ? $urls[$country][$mode] : FALSE;
}

/**
 * Returns amazon purchase contract id.
 */
function commerce_cba_get_purchase_contract_id() {
  return isset($_COOKIE['apay-pcId']) ? $_COOKIE['apay-pcId'] : NULL;
}

/**
 * Remove cookie from Amazon so the customer can repeat a purchase without
 * issues.
 *
 * Firefox might refuse to delete the cookie if the original value is not sent.
 */
function commerce_cba_purge_contract_id_cookie() {
  setcookie('apay-pcId', '', time()-10800, '/');
  if ($contract_id = commerce_cba_get_purchase_contract_id()) {
    setcookie('apay-pcId', $contract_id, time()-10800, '/');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_cba_form_commerce_checkout_pane_settings_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['checkout_pane'])) {
    return;
  }

  if (($checkout_pane = $form['checkout_pane']['#value']) && ($checkout_pane['module'] == 'commerce_customer')) {
    $form['submit']['#submit'][] = 'commerce_cba_form_commerce_checkout_pane_settings_submit';
  }
}

function commerce_cba_form_commerce_checkout_pane_settings_submit($form, $form_state) {
  $pane_id = $form['checkout_pane']['#value']['pane_id'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * When cancelling an order, remove Amazon data.
 * @see commerce_cba_form_commerce_checkout_form_reset_amazon_data()
 */
function commerce_cba_form_commerce_checkout_form_alter(&$form, &$form_state, $form_id) {
  $form['buttons']['cancel']['#submit'][] = 'commerce_cba_form_commerce_checkout_form_reset_amazon_data';
}

/**
 * Implements hook_form_alter().
 *
 * When doing checkout with the normal checkout button, remove Amazon data.
 * @see commerce_cba_form_commerce_checkout_form_reset_amazon_data()
 */
function commerce_cba_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'views_form_commerce_cart_form_') === 0) {
    $form['#submit'][] = 'commerce_cba_form_commerce_checkout_form_reset_amazon_data';
  }

  // Checkout form alter for Amazon checkout.
  if (strpos($form_id, 'commerce_checkout_form_') === 0) {
    $elements = element_children($form);
    $order = $form_state['order'];
    // Amazon widget settings.
    $default_cba_widget_settings = array(
      'cba_button_size' => 'large',
      'cba_button_color' => 'orange',
      'cba_button_background' => 'white',
      'cba_widget_width' => NULL,
      'cba_widget_height' => NULL,
    );
    $cba_widget_settings = variable_get('cba_widget_settings', $default_cba_widget_settings);
    $display_mode = isset($order->data['commerce_cba']['express-checkout']) ? 'Read' : 'Edit';

    // Replace customer profiles with addresses by Amazon widgets if the right
    // flag is on or the Amazon checkout button was used instead of normal checkout.
    //$addresswidgets = filter_input(INPUT_GET, 'addresswidget', FILTER_SANITIZE_STRING, FILTER_REQUIRE_ARRAY);
    foreach ($elements as $name) {
      if (($pane = commerce_checkout_pane_load($name)) && $pane['module'] == 'commerce_customer' && isset($form[$name]['commerce_customer_address'])) {
        if(commerce_cba_get_purchase_contract_id() && isset($form[$name]['commerce_customer_profile_copy'])) {
          unset($form[$name]['commerce_customer_profile_copy']);
        }
        // Amazon checkout button
        if(isset($order->data['commerce_cba']) && (isset($order->data['commerce_cba']['inline-checkout']) || isset($order->data['commerce_cba']['express-checkout'])) && commerce_cba_get_purchase_contract_id()) {
          $form[$name]['commerce_customer_address']['#access'] = FALSE;
          // Hide Addressbook form.
          if(isset($form[$name]['addressbook'])) {
            $form[$name]['addressbook']['#access'] = FALSE;
          }
          $form[$name]['#profile_type'] = str_replace('customer_profile_', '', $name);
          $destination = isset($order->data['commerce_cba']['express-checkout']) ? '#default' : $form[$name]['#profile_type'];
          // For Express checkout we won't have the onAddressSelect
          // so we need to flag the order for this profile here.
          if (isset($order->data['commerce_cba']['express-checkout'])) {
            commerce_cba_set_order($form[$name]['#profile_type'], commerce_cba_get_purchase_contract_id());
          }
          $form[$name]['cba_addresswidget'] = commerce_cba_amazonaddresswidget($form[$name]['#profile_type'], $display_mode, $destination, $cba_widget_settings);
        }
      }
    }

    // Check if there's an address managed by Amazon widgets to save the customer
    // profile accordingly.
    $form_state['commerce_cba_checkout_address'] = array();
    foreach ($elements as $name) {
      if (!empty($form[$name]['cba_addresswidget'])) {
        $pane_id = 'customer_profile_' . $form[$name]['#profile_type'];
        _commerce_cba_form_commerce_checkout_form_checkout($form, $form_state, $name, $form[$name]['#profile_type'], $order, $pane_id);
      }
    }

    // When there's a customer profile pane with an address replaced with an
    // address widget, save it using the data coming back from Amazon.
    foreach ($elements as $name) {
      if (isset($form[$name]['cba_addresswidget']) && $pane = commerce_checkout_pane_load($name)) {
        // Get the address widget related with this pane.
        $pane_id = 'customer_profile_' . $form[$name]['#profile_type'];
        if ($pane['pane_id'] == $pane_id) {
          _commerce_cba_form_commerce_checkout_form_checkout($form, $form_state, $name, $form[$name]['#profile_type'], $order, $pane_id);
        }
      }
    }

    // Add submit and validate callbacks for addresses.
    if (!empty($form_state['commerce_cba_checkout_address']) || isset($order->data['commerce_cba']['express-checkout'])) {
      $form['buttons']['continue']['#submit'][] = 'commerce_cba_form_commerce_checkout_add_address';
      $form['buttons']['continue']['#validate'][] = 'commerce_cba_form_commerce_checkout_validate';
    }
    // Wallet validation process.
    if ((isset($order->data['commerce_cba']['inline-checkout']) || isset($order->data['commerce_cba']['express-checkout'])) && commerce_cba_get_purchase_contract_id() && isset($form['commerce_payment'])) {
      // Disable payments form elements.
      $form['commerce_payment']['payment_method']['#access'] = FALSE;
      $form['commerce_payment']['payment_method']['#value'] = 'commerce_checkout_by_amazon|commerce_payment_commerce_checkout_by_amazon';
      // Unset unneeded payment form elements.
      unset($form['commerce_payment']['payment_details']);
      // Add amazon wallet widget to payment pane.
      $form['commerce_payment']['cba_walletwidget'] = commerce_cba_amazonwalletwidget($display_mode, $cba_widget_settings);
      $form_state['commerce_cba_checkout_wallet'] = array('wallet');
      $form['buttons']['continue']['#validate'][] = 'commerce_cba_form_commerce_checkout_validate';
      // For Express checkout we won't have the onAddressSelect
      // so we need to flag the order for this profile here.
      if (isset($order->data['commerce_cba']['express-checkout']) || !isset($order->data['commerce_cba']['wallet'])) {
        commerce_cba_set_order('wallet', commerce_cba_get_purchase_contract_id());
      }
    }
    elseif ((!isset($order->data['commerce_cba']['inline-checkout']) && !isset($order->data['commerce_cba']['express-checkout'])) && !commerce_cba_get_purchase_contract_id() && isset($form['commerce_payment'])) {
      $form['commerce_payment']['payment_method']['#options'] = array_diff_key($form['commerce_payment']['payment_method']['#options'], array('commerce_checkout_by_amazon|commerce_payment_commerce_checkout_by_amazon' => 'Checkout by Amazon'));  
    }
  }

  // Cart forms alter.
  if (strpos($form_id, 'views_form_commerce_cart_form_') === 0 && variable_get('cba_merchant_id', '')) {
    // Add the Amazon checkout button to cart form.
    $cba_widget_settings = variable_get('cba_widget_settings', array());
    $checkout_type = variable_get('cba_checkout_type', 'inline');
    if ($checkout_type == 'inline') {
      $checkout_button = commerce_cba_amazoninlinewidget('checkout', $cba_widget_settings);
    }
    elseif ($checkout_type == 'express') {
      $checkout_button = commerce_cba_amazonexpresswidget($cba_widget_settings);
    }
    $form['#suffix'] .= drupal_render($checkout_button);
    // Hide regular checkout button.
    $payment_methods = commerce_payment_methods();
    $cba_hide_regular_checkout = variable_get('cba_hide_regular_checkout', 0);
    if (isset($form['actions']['checkout']) && (!empty($cba_hide_regular_checkout) || sizeof($payment_methods) <= 1)) {
      $form['actions']['checkout']['#access'] = FALSE;
    }
  }

}

/**
 * Implements hook_form_alter().
 *
 * Move hook_form_alter() to the end of the list.
 * Needed for checkout button on cart page.
 */
function commerce_cba_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['commerce_cba'];
    unset($implementations['commerce_cba']);
    $implementations['commerce_cba'] = $group;
  }
}

/**
 * Validation of panes with address or widgets components.
 */
function commerce_cba_form_commerce_checkout_validate(&$form, &$form_state) {
  $order = commerce_order_load($form_state['order']->order_id);

  // Validate the address selection if needed.
  if (isset($form_state['commerce_cba_checkout_address'])) {
    foreach ($form_state['commerce_cba_checkout_address'] as $profile_type) {
      if (!isset($order->data['commerce_cba'][$profile_type])) {
        form_set_error($profile_type, t('Please select one of the addresses to continue'));
        return FALSE;
      }
    }
  }

  // Validate the wallet selection if needed.
  if (isset($form_state['commerce_cba_checkout_wallet'])) {
    foreach ($form_state['commerce_cba_checkout_wallet'] as $payment) {
      if (!isset($order->data['commerce_cba'][$payment])) {
        form_set_error($payment, t('Please select a payment method to continue'));
        return FALSE;
      }
    }
  }

  // Check the integrity of the call to get the address.
  include_once 'includes/amazonAPI.php';
  $amazonAPI = new amazonAPI();
  $response = $amazonAPI->contractQuery('GetPurchaseContract');
  if ($response->code <> '200') {
    form_set_error('', t('There was a problem with your checkout process. Please contact the store for further information.'));
    return FALSE;
  }
  else {
    $form_state['amazonAPI'] = $amazonAPI;
    $form_state['amazonResponse'] = $response;
  }

  return TRUE;

}

/**
 * Helper function to build the customer profile and attach it to the form.
 */
function _commerce_cba_form_commerce_checkout_form_checkout(&$form, &$form_state, $name, $profile_type, $order, $pane_id) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  // If the associated order field has been set...
  if ($field_name = variable_get('commerce_' . $pane_id . '_field', '')) {
    if (isset($wrapper->{$field_name})) {
      $profile = $wrapper->{$field_name}->value();
    }
  }
  else {
    // Or try the association stored in the order's data array if no field is set.
    if (!empty($order->data['profiles'][$pane_id])) {
      $profile = commerce_customer_profile_load($order->data['profiles'][$pane_id]);
    }
  }

  // Create a new profile of the specified type if it hasn't already been made.
  if (empty($profile)) {
    $profile = commerce_customer_profile_new($profile_type, $order->uid);
  }
  // Add the entity context of the current cart order.
  $profile->entity_context = array(
    'entity_type' => 'commerce_order',
    'entity_id' => $order->order_id,
  );
  $profile->status = TRUE;

  $form[$name]['customer_profile'] = array(
    '#type' => 'value',
    '#value' => $profile,
  );

  $form_state['commerce_cba_checkout_address'][$name] = $profile_type;
}

/**
 * Properly save the customer profile address when the address widget is
 * present.
 */
function commerce_cba_form_commerce_checkout_add_address(&$form, &$form_state) {
  if (!empty($form_state['commerce_cba_checkout_address'])) {
    $order = commerce_order_load($form_state['order']->order_id);

    foreach ($form_state['commerce_cba_checkout_address'] as $name => $profile_type) {
      $pane_id = 'customer_profile_' . $profile_type;
      $profile = $form[$name]['customer_profile']['#value'];
      // For Express checkout will use the #default DestinationName.
      if (isset($order->data['commerce_cba']['express-checkout'])) {
        $profile_type = '#default';
      }
      $address = $form_state['amazonAPI']->getAddress($form_state['amazonResponse'], $profile_type);

      // Don't require address form elements.
      if (isset($form[$name]['commerce_customer_address'])) {
        unset($form[$name]['commerce_customer_address']['#required']);
      }

      if (!empty($address)) {
        $form_state['values'][$name]['commerce_customer_address'][LANGUAGE_NONE][0] = array(
          'country' => $address['CountryCode'],
          'name_line' => $address['Name'],
          'postal_code' => $address['PostalCode'],
          'locality' => $address['City'],
          'administrative_area' => isset($address['StateOrProvinceCode']) ? $address['StateOrProvinceCode'] : '',
          'data' => serialize($address),
        );
        commerce_unrequire_form_elements($form[$name]);
        field_attach_submit('commerce_customer_profile', $profile, $form[$name], $form_state);
        $profile->commerce_customer_address = $form_state['values'][$name]['commerce_customer_address'];
        // Save the profile.
        commerce_customer_profile_save($profile);
        // Store the profile ID for the related field as specified on the settings form.
        $wrapper = entity_metadata_wrapper('commerce_order', $order);

        if ($field_name = variable_get('commerce_' . $pane_id . '_field', '')) {
          $wrapper->{$field_name} = $profile;
        }
        else {
          // Or make the association in the order's data array if no field was found.
          $order->data['profiles'][$pane_id] = $profile->profile_id;
        }
        // Set a flag of the type required.
        $order->data['commerce_cba']['has_address'] = TRUE;
        commerce_order_save($order);
      }
    }
  }
}

/**
 * Remove the cookie from Amazon and payment info to enable regular checkout.
 */
function commerce_cba_form_commerce_checkout_form_reset_amazon_data($form, $form_state) {
  if (isset($_COOKIE['apay-pcId'])) {
    $order = $form_state['order'];
    if (isset($order->data['commerce_cba'])) {
      unset($order->data['commerce_cba']);
      commerce_order_save($order);
    }
    commerce_cba_purge_contract_id_cookie();
  }
}

/**
 * Callback to add a flag to the order to indicate that the payment should go
 * through Amazon.
 *
 * @param string $type
 *   Type of the flag set to TRUE, it might be wallet or address selection.
 * @return int
 */
function commerce_cba_set_order($type = NULL, $contract_id = NULL) {
  global $user;
  if (!$contract_id) {
    $contract_id = filter_input(INPUT_POST, 'purchaseContractId');
  }
  if (empty($type) || $contract_id <> commerce_cba_get_purchase_contract_id()) {
    return MENU_ACCESS_DENIED;
  }

  if ($order = commerce_cart_order_load($user->uid)) {
    if (!isset($order->data['commerce_cba'])) {
      $order->data['commerce_cba'] = array();
    }
    // Set a flag of the type required.
    $order->data['commerce_cba'][$type] = TRUE;
    commerce_order_save($order);
  }
  else {
    return MENU_ACCESS_DENIED;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * Defines Checkout by Amazon payment method.
 */
function commerce_cba_commerce_payment_method_info() {
  $payment_methods['commerce_checkout_by_amazon'] = array(
    'title' => t('Checkout by Amazon'),
    'description' => t('Integration with Checkout by Amazon payment method'),
    'active' => TRUE,
    'terminal' => FALSE,
  );
  return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function commerce_cba_checkout_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['info'] = array(
    '#markup' => t('Complete the payment using Checkout by Amazon with the address and wallet selected in previous steps'),
  );
  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_checkout_by_amazon_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  if (!isset($order->data['commerce_cba']) || !isset($order->data['commerce_cba']['wallet']) || !isset($order->data['commerce_cba']['has_address'])) {
    drupal_set_message(t('Some information for proceeding with the payment might be missing, please review previous steps in order to complete at least address and wallet information'), 'error');
    return FALSE;
  }

  include_once 'includes/amazonAPI.php';
  $amazonAPI = new amazonAPI();

  // Inform Amazon about all the items purchased.
  $response = $amazonAPI->setPurchaseItems($order);
  if ($response->code <> '200') {
    return FALSE;
  }

  // Add all order level charges such as shipping or order discounts.
  $response = $amazonAPI->setContractCharges($order);
  if ($response->code <> '200') {
    return FALSE;
  }

  // Complete the process.
  $response = $amazonAPI->completePurchaseContract();
  if ($response->code <> '200') {
    return FALSE;
  }
  else {
    // Store the order ids from Amazon in the order.
    $order_ids = $amazonAPI->getOrderIds($response);
    $i = 0;
    foreach ($order_ids as $order_id) {
      $order->commerce_cba_amazon_order_ids[LANGUAGE_NONE][$i]['value'] = $order_id;
      $i++;
    }

  }

  return TRUE;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_checkout_by_amazon_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Set the payment trasaction for the order.
  $order->data['commerce_checkout_by_amazon'] = $pane_values;
  commerce_checkout_by_amazon_payment_transaction($payment_method, $order, $charge);
  // Remove the cookie set for this purchase.
  commerce_cba_purge_contract_id_cookie();
}

/**
 * Creates an Checkout by Amazon payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_checkout_by_amazon_payment_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_checkout_by_amazon', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = 'Name: @name';
  $transaction->message_variables = array('@name' => 'Checkout by Amazon payment');

  commerce_payment_transaction_save($transaction);
  return $transaction;
}

/**
 * Implements hook_library().
 */
function commerce_cba_library() {
  $module_path = drupal_get_path('module', 'commerce_cba');
  $amazon_js = commerce_cba_javascript_file();
  $items = array();

  $items['amazon_widgets'] = array(
    'title' => t('Commerce Checkout by Amazon library'),
    'version' => '1.0',
    'js' => array(
      $amazon_js => array('type' => 'external'),
      $module_path . '/js/commerce_cba_widgets.js' => array('type' => 'file'),
    ),
    'dependencies' => array(array('system', 'jquery.bbq')),
  );

  return $items;
}

/**
 * Implements hook_enable().
 */
function commerce_cba_enable() {
  // Make sure we're in a non cached environment.
  entity_info_cache_clear();
  field_cache_clear();

  $bundles = field_info_bundles('commerce_order');
  foreach ($bundles as $name => $properties) {
    commerce_cba_order_configuration($name);
  }
}

/**
 * Create fields and instances for storing Amazon order ids.
 *
 * @param string $name
 *   commerce order bundle name.
 */
function commerce_cba_order_configuration($name = 'commerce_order') {
  $field_name = 'commerce_cba_amazon_order_ids';
  $field = field_info_field($field_name);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type' => 'text',
      'translatable' => FALSE,
    );
    field_create_field($field);
  }

  $instance = field_info_instance('commerce_order', $field_name, $name);
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_order',
      'bundle' => $name,
      'label' => t('Amazon order ids'),
      'settings' => array(),
    );

    foreach (array('default', 'customer', 'administrator') as $view_mode) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'type' => 'hidden',
      );
    }

    field_create_instance($instance);
  }
}

/**
 * Returns a Commerce order given an Amazon order id.
 *
 * @param string $amazon_order_id
 *   Amazon order id.
 * @return bool|mixed
 *   Commerce order if found or FALSE.
 */
function commerce_cba_load_order_by_amazon_id($amazon_order_id = '') {
  if (empty($amazon_order_id)) {
    return FALSE;
  }
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'commerce_order', '=')
    ->fieldCondition('commerce_cba_amazon_order_ids', 'value', $amazon_order_id, '=');
  $result = $query->execute();

  if (!empty($result['commerce_order'])) {
    $order_id = reset($result['commerce_order']);
    return commerce_order_load($order_id->order_id);
  }

  return FALSE;
}

/**
 * Amazon Inline Checkout widget function.
 *
 * @param string $button_type
 *   Amazon button type.
 * @param string $settings
 *   Amazon button settings: size, color, background.
 * @param string $checkout_pane
 *   Customer profile pane that should use the address button.
 * @return array
 *   Amazon Inline checkout widget to be rendered.
 */
 function commerce_cba_amazoninlinewidget($button_type = 'checkout', $settings, $checkout_pane = NULL) {
  // There's no point in displaying the button if amazon js was not included.
  if ($js = commerce_cba_javascript_file()) {
    $html_id = drupal_html_id('AmazonInlineWidget');
    $content[$button_type]['#attached']['library'] = array(array('commerce_cba', 'amazon_widgets'));

    $callbacks = array();
    if ($button_type == 'checkout') {
      $callbacks = array('callbacks' => array('onAuthorize' => 'commerce_cba_redirect_checkout'));
    }
    elseif ($button_type == 'addressBook') {
      $callbacks = array('callbacks' => array('onAuthorize' => 'commerce_cba_address_redirect_checkout'));
    }
    $content[$button_type]['#attached']['js'][] = array(
      'data' => array(
        $html_id => $html_id,
        'commerce_cba' => array(
          $html_id => array(
            'merchantId' => variable_get('cba_merchant_id', ''),
            'purchaseContractId' => commerce_cba_get_purchase_contract_id(),
            'widget_type' => 'InlineCheckoutWidget',
            'settings' => array(
              'buttonType' => $button_type,
              'buttonSettings' => array(
                'size' => isset($settings['cba_button_size']) ? $settings['cba_button_size'] : 'large',
                'color' => isset($settings['cba_button_color']) ? $settings['cba_button_color'] : 'orange',
                'background' => isset($settings['cba_button_background']) ? $settings['cba_button_background'] : 'white',
              ),
              'checkout_pane' => $checkout_pane,
             ),
          ) + $callbacks,
        )),
      'type' => 'setting',
    );
    $content[$button_type]['#attached']['css'] = array(drupal_get_path('module', 'commerce_cba') . '/css/commerce_cba.css');

    $content[$button_type]['#type'] = 'container';
    $content[$button_type]['#attributes'] = array('id' => $html_id);
    // Place the button aligned to the right if it's checkout.
    if ($button_type == 'checkout') {
      $content[$button_type]['#attributes']['class'] = 'checkout-by-amazon-pay';
    }
    return $content;
  }
}

/**
 * Amazon Inline Checkout widget function.
 *
 * @param string $settings
 *   Amazon button settings: size, color, background.
 * @return array
 *   Amazon Expresss checkout (button) widget to be rendered.
 */
function commerce_cba_amazonexpresswidget($settings) {
  // There's no point in displaying the button if amazon js was not included.
  if ($js = commerce_cba_javascript_file()) {
    $button_type = 'express-checkout';
    $html_id = drupal_html_id('AmazonExpressWidget');
    $content[$button_type]['#attached']['library'] = array(array('commerce_cba', 'amazon_widgets'));

    $callbacks = array();
    $callbacks = array('callbacks' => array('onAuthorize' => 'commerce_cba_redirect_checkout'));
    $content[$button_type]['#attached']['js'][] = array(
      'data' => array(
        $html_id => $html_id,
        'commerce_cba' => array(
          $html_id => array(
            'merchantId' => variable_get('cba_merchant_id', ''),
            'purchaseContractId' => commerce_cba_get_purchase_contract_id(),
            'widget_type' => 'ExpressCheckoutWidget',
            'settings' => array(
              'buttonSettings' => array(
                'size' => isset($settings['cba_button_size']) ? $settings['cba_button_size'] : 'large',
                'color' => isset($settings['cba_button_color']) ? $settings['cba_button_color'] : 'orange',
                'background' => isset($settings['cba_button_background']) ? $settings['cba_button_background'] : 'white',
              ),
             ),
          ) + $callbacks,
        )),
      'type' => 'setting',
    );
    $content[$button_type]['#attached']['css'] = array(drupal_get_path('module', 'commerce_cba') . '/css/commerce_cba.css');

    $content[$button_type]['#type'] = 'container';
    $content[$button_type]['#attributes'] = array('id' => $html_id);
    // Place the button aligned to the right if it's checkout.
    $content[$button_type]['#attributes']['class'] = 'checkout-by-amazon-pay';
    return $content;
  }
}

/**
 * Amazon Address widget function.
 *
 * @param string $profile_type
 *   Customer profile type to be used as Amazon address destination.
 * @param string $display_mode
 *   View mode of Amazon address widget, Read or Edit.
 * @return array
 *   Amazon address widget to be rendered.
 */
function commerce_cba_amazonaddresswidget($profile_type = 'billing', $display_mode = 'Edit', $destination = '#default', $settings) {
  if ($purchase_contract_id = commerce_cba_get_purchase_contract_id()) {
    $html_id = drupal_html_id('AmazonAddressWidget');
    $content[$profile_type]['#attached']['library'][] = array('commerce_cba', 'amazon_widgets');

    $callbacks = array('callbacks' => array('onAddressSelect' => 'commerce_cba_add_widget_info'));
    // Width and height settings.
    $dimensions = array('size' => array('width' => $settings['cba_widget_width'], 'height' => $settings['cba_widget_height']));

    $data = array(
      'commerce_cba' => array(
        $html_id => array(
          'html_id' => $html_id,
          'purchaseContractId' => commerce_cba_get_purchase_contract_id(),
          'widget_type' => 'AddressWidget',
          'merchantId' => variable_get('cba_merchant_id', ''),
          'displayMode' => $display_mode,
          'destinationName' => $destination,
          'design' => $dimensions,
        ) + $callbacks,
      ),
    );

    $content[$profile_type]['#attached']['js'][] = array(
      'data' => $data,
      'type' => 'setting',
    );

    $content[$profile_type]['#type'] = 'container';
    $content[$profile_type]['#attributes'] = array('id' => $html_id);
  }
  return $content;
}

/**
 * Amazon Wallet widget function.
 *
 * @param string $profile_type
 *   Customer profile type to be used as Amazon address destination.
 * @param string $display_mode
 *   Display mode of Amazon wallet widget, Read or Edit.
 * @return array
 *   Amazon wallet widget to be rendered.
 */
function commerce_cba_amazonwalletwidget($display_mode = 'Edit', $settings) {
  // There's no point in displaying the button if amazon js was not included.
  if (($js = commerce_cba_javascript_file()) && ($purchase_contract_id = commerce_cba_get_purchase_contract_id())) {
    $html_id = drupal_html_id('AmazonWalletWidget');
    $content['walletwidget']['#attached']['library'] = array(array('commerce_cba', 'amazon_widgets'));

    $callbacks = array('callbacks' => array('onPaymentSelect' => 'commerce_cba_add_widget_info'));
    // Width and height settings.
    $dimensions = array('size' => array('width' => $settings['cba_widget_width'], 'height' => $settings['cba_widget_height']));

    $data = array(
      'commerce_cba' => array(
        $html_id => array(
          'html_id' => $html_id,
          'widget_type' => 'WalletWidget',
          'merchantId' => variable_get('cba_merchant_id', ''),
          'purchaseContractId' => commerce_cba_get_purchase_contract_id(),
          'displayMode' => $display_mode,
          'design' => $dimensions,
        ) + $callbacks,
      ),
    );

    $content['walletwidget']['#attached']['js'][] = array(
      'data' => $data,
      'type' => 'setting',
    );

    $content['walletwidget']['#type'] = 'container';
    $content['walletwidget']['#attributes'] = array('id' => $html_id);
  }
  return $content;
}

/**
 * Amazon Order details widget function.
 *
 * @param string $order
 *   Current checkout order.
 * @return array
 *   Amazon order details widget to be rendered.
 */
 function commerce_cba_orderdetailswidget($order, $settings = array()) {
  $content = array();
  // There's no point in displaying the button if amazon js was not included.
  if (($js = commerce_cba_javascript_file()) && (!empty($order->commerce_cba_amazon_order_ids))) {
    $content['orderdetailswidget']['#attached']['library'] = array(array('commerce_cba', 'amazon_widgets'));

    $order_ids = field_get_items('commerce_order', $order, 'commerce_cba_amazon_order_ids');
    foreach ($order_ids as $order_id) {
      $html_id = drupal_html_id('OrderDetailsWidget');
      // @TODO: Add height and width.
      $data = array(
        'commerce_cba' => array(
          $html_id => array(
            'html_id' => $html_id,
            'widget_type' => 'OrderDetailsWidget',
            'merchantId' => variable_get('cba_merchant_id', ''),
            'orderId' => $order_id['value'],
          ),
        ),
      );

      $content['orderdetailswidget'][$html_id]['#attached']['js'][] = array(
        'data' => $data,
        'type' => 'setting',
      );

      $content['orderdetailswidget'][$html_id]['#type'] = 'container';
      $content['orderdetailswidget'][$html_id]['#attributes'] = array('id' => $html_id);
    }
  }

  return $content;
}
